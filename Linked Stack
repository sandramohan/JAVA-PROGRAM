import static java.lang.System.exit;
class StackUsingLinkedlist {
private class Node {
int data;
Node link;
}
Node top;
StackUsingLinkedlist()

{
this.top = null;
}
public void push(int x)
{
Node temp = new Node();
if (temp == null) {
System.out.print(&quot;\nHeap Overflow&quot;);
return;
}
temp.data = x;
temp.link = top;
top = temp;
}
public boolean isEmpty()
{
return top == null;
}
public int peek()
{
if (!isEmpty()) {
return top.data;
}
else {
System.out.println(&quot;Stack is empty&quot;);
return -1;
}
}
public void pop()
{
if (top == null) {
System.out.print(&quot;\nStack Underflow&quot;);
return;
}
top = (top).link;
}
public void display()
{
if (top == null) {
System.out.printf(&quot;\nStack Underflow&quot;);

exit(1);
}
else {
Node temp = top;
while (temp != null) {
System.out.printf(&quot;%d-&gt;&quot;, temp.data);
temp = temp.link;
}
}
}
}
public class StackLinkedLIst {
public static void main(String[] args)
{
StackUsingLinkedlist obj = new StackUsingLinkedlist();
obj.push(11);
obj.push(22);
obj.push(33);
obj.push(44);
obj.display();
System.out.printf(&quot;\nTop element is %d\n&quot;, obj.peek());
obj.pop();
obj.pop();
obj.display();
System.out.printf(&quot;\nTop element is %d\n&quot;, obj.peek());
}
}
